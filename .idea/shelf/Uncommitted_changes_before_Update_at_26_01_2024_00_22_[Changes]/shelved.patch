Index: app/src/main/java/com/cc221045/mathemelloccl3/screens/PostsListScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cc221045.mathemelloccl3.screens\r\n\r\nimport android.util.Log\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.aspectRatio\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Favorite\r\nimport androidx.compose.material.icons.filled.FavoriteBorder\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImagePainter\r\nimport coil.compose.rememberAsyncImagePainter\r\nimport com.cc221045.mathemelloccl3.data.LikedPost\r\nimport com.cc221045.mathemelloccl3.data.Post\r\nimport com.cc221045.mathemelloccl3.ui.theme.AnimatedButton\r\nimport com.cc221045.mathemelloccl3.ui.theme.appFontFamily\r\nimport com.cc221045.mathemelloccl3.viewmodel.MainViewModel\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun PostsListScreen(\r\n    userEmail: String,\r\n    viewModel: MainViewModel,\r\n    navController: NavHostController,\r\n) {\r\n\r\n\r\n\r\n\r\n    LaunchedEffect(Unit) {\r\n        viewModel.reloadPosts()\r\n    }\r\n    val posts = viewModel.posts\r\n    var searchQuery by remember { mutableStateOf(\"\") }\r\n\r\n    val darkBackground = Color(4279705391) // Replace with the exact color from the screenshot\r\n    val textColor = Color(0xFF60A491)\r\n    val lightTextColor = Color(0xFF9D9EA5)\r\n    val cornerRadius = 10.dp\r\n\r\n\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(darkBackground) // Apply the background color here\r\n    )\r\n    Column(modifier = Modifier.padding(16.dp)) {\r\n        Text(\r\n            text = \"Posts\",\r\n            color = textColor,\r\n            style = TextStyle(\r\n                fontFamily = appFontFamily, // or any other font family you want\r\n                fontWeight = FontWeight.ExtraBold, // choose the desired weight\r\n                fontSize = 32.sp // set the font size as needed\r\n            ),\r\n            modifier = Modifier.padding(bottom = 16.dp),\r\n        )\r\n\r\n        // Search Bar\r\n        OutlinedTextField(\r\n            value = searchQuery,\r\n            shape = RoundedCornerShape(cornerRadius),\r\n            onValueChange = { searchQuery = it },\r\n            placeholder = { Text(\"Search posts\", color = lightTextColor,\r\n                fontFamily = appFontFamily,\r\n                fontWeight = FontWeight.Medium) },\r\n            trailingIcon = { // This is the change\r\n                Icon(\r\n                    imageVector = Icons.Filled.Search, // Assuming you have a Search icon in your material icons\r\n                    contentDescription = \"Search\",\r\n                    modifier = Modifier.clickable { /* Icon click logic here */ }\r\n                )\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth(),\r\n        )\r\n\r\n        val filteredPosts = posts.filter {\r\n            searchQuery.isEmpty() || it.title.contains(searchQuery, ignoreCase = true) || it.content.contains(searchQuery, ignoreCase = true)\r\n        }\r\n\r\n        Column(modifier = Modifier.padding(top = 16.dp, bottom = 16.dp)) {\r\n\r\n\r\n            if (filteredPosts.isEmpty()) {\r\n                Text(\"No posts available\", style = TextStyle(\r\n                    color = lightTextColor,\r\n                    fontFamily = appFontFamily,\r\n                    fontWeight = FontWeight.Medium\r\n                ),\r\n\r\n                    )\r\n            } else {\r\n\r\n                LazyColumn {\r\n                    items(filteredPosts) { post ->\r\n\r\n                        if (FirebaseAuth.getInstance().currentUser?.email ==\"admin@admin.com\" ) {\r\n                            AdminPostItem(post, viewModel, navController)\r\n                        } else {\r\n\r\n                            UserPostItem(post, viewModel, navController,\r\n                                onLikeClicked = { viewModel.reloadPosts() } )\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }}}}\r\n\r\n@Composable\r\nfun AdminPostItem(\r\n    post: Post,\r\n    viewModel: MainViewModel,\r\n    navController: NavHostController,\r\n) {\r\n    val imagePainter = rememberAsyncImagePainter(model = post.imageUrl)\r\n    val buttonColor = Color(0xFF3C3F4A)\r\n    Card(\r\n        modifier =\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .padding(vertical = 4.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),\r\n        shape = MaterialTheme.shapes.extraSmall,\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp)) {\r\n            Text(\r\n                text = post.title,\r\n                style = MaterialTheme.typography.bodyLarge,\r\n                fontWeight = FontWeight.Bold,\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Text(\r\n                text = post.content,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n            )\r\n\r\n\r\n            Spacer(modifier = Modifier.width(16.dp))\r\n// Image\r\n            post.imageUrl?.let { imageUrl ->\r\n                Card(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(8.dp),\r\n                    shape = RoundedCornerShape(8.dp), // Define the shape of the card\r\n                    colors = CardDefaults.cardColors(containerColor = buttonColor,\r\n                        contentColor = buttonColor), // Set the card background color here\r\n                    elevation = CardDefaults.cardElevation(4.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = imagePainter,\r\n                        contentDescription = \"Selected Image\",\r\n                        modifier = Modifier\r\n                            .height(150.dp) // Set a fixed height\r\n                            .fillMaxWidth() // Ensure it fills the width of the card\r\n                            .clip(RoundedCornerShape(8.dp)) // Clip the image to fit the card shape\r\n                            .aspectRatio(1f), // Maintain aspect ratio\r\n                        contentScale = ContentScale.Crop // Crop the image to fit the dimensions\r\n                    )\r\n\r\n                    if (imagePainter.state is AsyncImagePainter.State.Error) {\r\n                        val errorState = imagePainter.state as AsyncImagePainter.State.Error\r\n                        val throwable = errorState.result.throwable\r\n                        Log.e(\"PostItem\", \"Error loading image: ${throwable.message}\")\r\n                    }\r\n                    Spacer(modifier = Modifier.width(16.dp)) // Add space between image and text\r\n\r\n                    Row(\r\n                        horizontalArrangement = Arrangement.End,\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                    ) {\r\n                        if (viewModel.isAdmin) {\r\n                            AnimatedButton(\r\n                                text = \"Edit\",\r\n                                onClick = { navController.navigate(\"editPost/${post.id}\") },\r\n                            )\r\n                            AnimatedButton(text = \"Delete\", onClick = { viewModel.deletePost(post) })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }}}\r\n\r\n\r\n@Composable\r\nfun SimplePostItem(likedPost: LikedPost) {\r\n    Card(\r\n        modifier =\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .padding(8.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),\r\n        colors = CardDefaults.cardColors(containerColor = Color(0xFF3C3F4A)) // Set the card background color here\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp)) {\r\n            Text(\r\n                text = likedPost.title,\r\n                style = MaterialTheme.typography.bodyLarge,\r\n                fontWeight = FontWeight.Bold,\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Text(\r\n                text = likedPost.content,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun UserPostItem(\r\n    post: Post,\r\n    viewModel: MainViewModel,\r\n    navController: NavHostController,\r\n    onLikeClicked: () -> Unit\r\n) {\r\n    // This painter will handle the image loading\r\n    val imagePainter = post.imageUrl?.let { imageUrl ->\r\n        rememberAsyncImagePainter(model = imageUrl)\r\n    }\r\n\r\n\r\n    val userEmail = FirebaseAuth.getInstance().currentUser?.email ?: \"\"\r\n\r\n    var isLiked by remember { mutableStateOf(false) }\r\n\r\n\r\n    LaunchedEffect(post.id, userEmail) {\r\n        isLiked = viewModel.isPostLiked(post.id, userEmail)\r\n        Log.d(\"AdminRequestItempp\", \"LaunchedEffect triggered for requestId: ${post.id}, isChecked: $isLiked\")\r\n    }\r\n\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(vertical = 4.dp),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),\r\n        shape = MaterialTheme.shapes.extraSmall,\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp)) {\r\n            Text(\r\n                text = post.title,\r\n                style = MaterialTheme.typography.bodyLarge,\r\n                fontWeight = FontWeight.Bold,\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Text(\r\n                text = post.content,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n            )\r\n\r\n            // Conditionally display the image if the URL is available\r\n            imagePainter?.let {\r\n                Card(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(8.dp),\r\n                    shape = RoundedCornerShape(20.dp),\r\n                    elevation = CardDefaults.cardElevation(4.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = it,\r\n                        contentDescription = \"Post Image\",\r\n                        modifier = Modifier\r\n                            .height(150.dp)\r\n                            .fillMaxWidth()\r\n                            .clip(RoundedCornerShape(8.dp))\r\n                            .aspectRatio(1f),\r\n                        contentScale = ContentScale.Crop\r\n                    )\r\n                }\r\n            }\r\n\r\n            // Like button and functionality\r\n            Row(\r\n                horizontalArrangement = Arrangement.End,\r\n                modifier = Modifier.fillMaxWidth(),\r\n            ) {\r\n                if (!viewModel.isAdmin) {\r\n                    IconButton(\r\n                        onClick = {\r\n                            isLiked = !isLiked\r\n                            viewModel.toggleLikePost(post, userEmail)\r\n                            onLikeClicked()\r\n                        },\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = if (isLiked) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,\r\n                            contentDescription = if (isLiked) \"Unlike\" else \"Like\",\r\n                            tint = if (isLiked) Color(0xFF60A491) else Color.Gray\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/cc221045/mathemelloccl3/screens/PostsListScreen.kt b/app/src/main/java/com/cc221045/mathemelloccl3/screens/PostsListScreen.kt
--- a/app/src/main/java/com/cc221045/mathemelloccl3/screens/PostsListScreen.kt	(revision 845ec052b8832613b16139c8b65b076ac1fa9e17)
+++ b/app/src/main/java/com/cc221045/mathemelloccl3/screens/PostsListScreen.kt	(date 1706224798373)
@@ -222,6 +222,8 @@
         }}}
 
 
+
+
 @Composable
 fun SimplePostItem(likedPost: LikedPost) {
     Card(
Index: app/src/main/res/drawable/human.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/human.xml b/app/src/main/res/drawable/human.xml
new file mode 100644
--- /dev/null	(date 1706224798378)
+++ b/app/src/main/res/drawable/human.xml	(date 1706224798378)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+</selector>
\ No newline at end of file
